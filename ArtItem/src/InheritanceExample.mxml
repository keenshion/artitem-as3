<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute"
	applicationComplete="onApplicationComplete(event)">
	<mx:states>
		<mx:State name="canvasOnly" enterState="this.setFocus()">
			<mx:RemoveChild target="{settings}"/>
			<mx:SetStyle target="{canvas}" name="top" value="0"/>
			<mx:SetStyle target="{canvas}" name="bottom" value="0"/>
			<mx:SetStyle target="{canvas}" name="right" value="0"/>
			<mx:SetStyle target="{canvas}" name="left" value="0"/>
		</mx:State>
	</mx:states>
	

	<mx:Canvas id="canvas" clipContent="true" click="onMouseDown(event)"
		borderStyle="solid" backgroundColor="#FFFFFF"
	 	left="0" top="0" bottom="0"
 right="0"/>
	 
	 <mx:Canvas id="settings" 
		y="10" height="556" left="-3" 
	 	borderStyle="solid" borderThickness="1" 
	 	borderColor="#D5D5D5" backgroundColor="#EAEAEA"
	  width="183">
		<mx:Button label="canvas only"  click="currentState = 'canvasOnly'" bottom="10" right="10"/>
		<mx:ColorPicker y="271" selectedColor="#FFFFFF" id="startCP" x="150"/>
		<mx:ColorPicker y="299" id="endCP" x="150"/>
		<mx:Label y="273" text="start" x="112"/>
		<mx:Label y="301" text="end" x="116"/>
		
		<mx:List id="ItemList" dataProvider="{itemsProvider}"  
			x="10" 
		 top="26" selectedIndex="0" height="123" width="162"/>
		<mx:Label x="140" y="7" text="Item"/>
		<mx:NumericStepper id="widthNS" 
			y="157" width="72" 
			maximum="3000" value="1000"
		 x="100"/>
		<mx:NumericStepper id="heightNS" 
			y="185" width="72" 
			maximum="3000" value="1000"
		 x="100"/>
		<mx:NumericStepper id="rateNS" 
			y="241" value="100" 
			maximum="3000"
		 x="100"/>
		<mx:NumericStepper id="iterationsNS" 
			y="213" value="300" 
			maximum="3000"
		 x="100"/>
		<mx:Label y="159" text="width" x="59"/>
		<mx:Label y="187" text="height" x="52"/>
		<mx:Label y="215" text="iterations" x="35"/>
		<mx:Label y="243" text="rate" x="65"/>
		<mx:Button label="reset settings" click="resetConstraints()" bottom="40" right="10"/>
		<mx:Button label="add item" click="addItem()" bottom="70" right="10"/>
		<mx:Label y="329" text="var 1" x="59"/>
		<mx:NumericStepper y="327" maximum="3000" value="50" id="Var1NS" x="100"/>
		
	</mx:Canvas>
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import fl.motion.Color;
			import com.jonmodell.art.inheritance.*;
			
			private function onApplicationComplete(e:Event):void{
				this.stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
				resetConstraints();
			}
			
			private function onKeyDown(e:KeyboardEvent):void{
				trace('key up ' + e.charCode.toString());
				switch(e.charCode){
					case 109:
						toggleState();
						break;
					default:
						break;
				}
			}
			
			private function toggleState():void{
				if(this.currentState == 'canvasOnly'){
					this.currentState = '';
				}else{
					this.currentState = 'canvasOnly';
				}
				
			}
			
			private function resetConstraints():void{
				widthNS.value 		= this.stage.width;
				heightNS.value 		= this.stage.height;
				iterationsNS.value	= 300;
				rateNS.value		= 100;
			}
			
			private function addItem():void{
				create(stage.width/2, stage.height/2);
			}
			
			private function onMouseDown(e:MouseEvent):void{
				create((e.currentTarget as Canvas).mouseX,(e.currentTarget as Canvas).mouseY);
			}
			
			private function create(drawX:Number, drawY:Number):void{
				var color:uint = fl.motion.Color.interpolateColor(startCP.selectedColor, endCP.selectedColor, Math.random());
				var art1:ArtItem;

				switch(this.ItemList.selectedItem.label){
					case 'Curvy Scribble':
						art1 = new CurvyScribble(iterationsNS.value, rateNS.value, color, widthNS.value, heightNS.value);
						break;
					case 'Sharp Scribble':
						art1 = new SharpScribble(iterationsNS.value, rateNS.value, color, widthNS.value, heightNS.value);
						break;
					case 'Flying Circles':
						art1 = new FlyingCircles(iterationsNS.value, rateNS.value, color, widthNS.value, heightNS.value, Var1NS.value);
						break;
					case 'Concentric Circles':
						art1 = new ConcentricCircles(iterationsNS.value, rateNS.value, color, widthNS.value, heightNS.value, Var1NS.value);
						break;
					default:
						break;
				}
				
				art1.x = drawX;
				art1.y = drawY;
				canvas.rawChildren.addChild(art1);
				art1.draw();
				
				if(art1.hasOwnProperty('colors'))
					trace ('has colors');
			}
			
			[Bindable]
			private var itemsProvider:ArrayCollection = new ArrayCollection([
				{label:'Curvy Scribble',data:1},
				{label:'Sharp Scribble',data:2},
				{label:'Flying Circles',data:3},
				{label:'Concentric Circles',data:4}
			]);
			
		]]>
	</mx:Script>
	
	
</mx:Application>